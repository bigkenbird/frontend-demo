{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "strict": true,
    "jsx": "preserve",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "lib": ["ESNext", "DOM", "dom.Iterable"],
    "skipLibCheck": true,
    "noEmit": true,
    "types": [
      "vite/client" // if using vite
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@components/*": ["./src/components/*"],
      "@views/*": ["./src/views/*"],
      "@style/*": ["./src/style/*"],
      "@icon/*": ["./src/components/icon/*"],
      "@app-vue/*": ["./src/vue/*"],
      "@mock/*": ["./src/mockdata/*"]
      // 消除警告用 You are running the esm-bundler build of vue-i18n. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle.
      // "vue-i18n": ["vue-i18n/dist/vue-i18n.cjs.js"]
    },
    /* Strict Type-Checking Options */
    // "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": false /* Raise error on expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": false /* Enable strict null checks. */,
    "strictFunctionTypes": true /* Enable strict checking of function types. */,
    "strictBindCallApply": true /* Enable strict 'bind', 'call', and 'apply' methods on functions. */,
    "strictPropertyInitialization": false /* Enable strict checking of property initialization in classes. */,
    "noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
    "alwaysStrict": true /* Parse in strict mode and emit "use strict" for each source file. */,
    /* Additional Checks */
    "noUnusedLocals": false /* Report errors on unused locals. */,
    "noUnusedParameters": false /* Report errors on unused parameters. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,
    "noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results */
    // "noPropertyAccessFromIndexSignature": true,  /* Require undeclared properties from index signatures to use element accesses. */
  },
  "include": [
    "src/**/*.ts",
    "src/**/**/*.ts",
    "src/**/**/**/*.ts",
    "src/**/**/**/**/*.ts",
    "src/**/**/**/**/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "src/**/**/*.vue",
    "src/**/**/**/*.vue",
    "src/**/**/**/**/*.vue",
    "src/**/**/**/**/**/*.vue"
  ],
  "references": [{ "path": "./tsconfig.node.json" }]
}
