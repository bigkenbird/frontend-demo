import { IData, IHistoryItem, IHistoryTxn } from '@twix/ix-lib-base';
import { INavigateData, IStatus } from '../vue-interface';
import { IVueConfig } from '../vue-config';
import { SharedDataService } from './shared-data.service';
import { IRouteService } from './route.service';
import { StatusService } from './status.service';
import { TimerService } from './timer.service';
import { BaseService } from './base-service';
export declare class NavigationService extends BaseService {
    serviceName: string;
    constructor();
    protected get config(): IVueConfig;
    protected get sharedData(): SharedDataService;
    protected get route(): IRouteService;
    protected get status(): StatusService;
    protected get timer(): TimerService;
    protected _ignoreHistoryTrack: boolean;
    protected _isChangeTxn: boolean;
    protected history: IHistoryTxn;
    protected previousHistory: IHistoryTxn;
    protected previousRouteUrlTemp: string;
    protected navigateDataTemp: INavigateData;
    protected waitNavigateData: any[];
    protected previousPromise: () => Promise<void>;
    protected refreshPageData: Record<string, any>;
    protected waitToDestoryComponentPath: string;
    isIgnoreHistoryTrack(): boolean;
    getHistory(): IHistoryTxn;
    isNext(): boolean;
    newHistory(routeUrl: string): void;
    addHistoryTrack(routePath: string | null, data: IData, pageData: IData, inited: boolean, pagePK?: string): void;
    getCurrentHistoryTrack(): IHistoryItem;
    changeTxn(taskNo: string, rqData?: IData): void;
    changeTxnAndNoTxnStack(taskNo: string, rqData?: IData): void;
    nextPage(routeUrl: string, rqData?: IData, ignorePageHistory?: boolean): void;
    waitNavigate(routeUrl: string, data: IData, ignorePageHistory: boolean, previousTrack: IHistoryItem | null, isChangeTxn: boolean, ignoreTxnHistory?: string): Promise<void>;
    nextPageByActivate(navigateData: INavigateData): void;
    nextErrorPage(status: IStatus, ignorePageHistory?: boolean): void;
    isErrorPage(): boolean;
    previousPage(previous?: number, data?: {}, reload?: boolean): void;
    previousFirstPage(data?: IData, reload?: boolean): void;
    changeHomeTxn(pageData?: IData): void;
    previousHomeTxn(): void;
    protected txnStack: string[];
    protected saveCurrentTxnStack: string;
    addTxnStack(): void;
    getTxnStackLength(): number;
    clearTxnStack(): void;
    previousTxn(): void;
    previousTxnOrPage(previous?: number, data?: {}, reload?: boolean): void;
    hasBackHistory(): boolean;
    addRoutePathPrefix(routePath: string): string;
    getNavigateDataTemp(): INavigateData;
    clearNavigateDataTemp(): void;
    getWaitNavigateData(): any[];
    getPreviousRouteUrlTemp(): string;
    clearPreviousRouteUrlTemp(): void;
    setWaitToDestoryComponentPath(routePath: string): void;
    refreshSamePage(): void;
    getPreviousPromise(): () => Promise<void>;
}
