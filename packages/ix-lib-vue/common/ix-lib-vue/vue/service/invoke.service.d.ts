import { IData } from '@twix/ix-lib-base';
import { IVueConfig } from '../vue-config';
import { IStatus } from '../vue-interface';
import { EventBusService } from './event-bus.service';
import { NavigationService } from './navigation.service';
import { SharedDataService } from './shared-data.service';
import { StatusService } from './status.service';
import { StorageService } from './storage.service';
import { ViewService } from './view.service';
import { BaseService } from './base-service';
export declare class InvokeService extends BaseService {
    protected serviceName: string;
    private syncLock;
    protected clientStartTime: string;
    protected ignoreCheckDupRequest: string[];
    protected get navigation(): NavigationService;
    protected get status(): StatusService;
    protected get config(): IVueConfig;
    protected get sharedData(): SharedDataService;
    protected get storage(): StorageService;
    protected get view(): ViewService;
    protected get eventBus(): EventBusService;
    protected getSendAndReceivePromise(rq: IData, resource: string, timeoutMills: number, initDupToken: boolean, ignoreDupToken: boolean): Promise<IData>;
    protected handleResponseIsNotJSON(responseText: string, failure: (status: IStatus) => void): void;
    protected handleResponseSysData(responseHeaders: IData, responseJSON: IData): void;
    protected doSendAndReceiveAction(rq: IData, resource: string, timeoutMills: number, success: (rsData: IData) => void, failure: (status: IStatus) => void, initDupToken: boolean, ignoreDupToken: boolean): Promise<void>;
    protected doSendAndReceive(resource: string, rqData: IData, success: (rsData: IData) => void, failure: (status: IStatus) => void, timeoutMills?: number, async?: boolean): void;
    protected confirmDuplicateToken(resource: string, async: boolean): boolean[];
    protected wrapSuccess(success: (rsData: IData) => void, checkSyncLock: boolean): (rsData: IData) => void;
    protected wrapFailure(failure: (status: IStatus) => void, checkSyncLock: boolean, resource: string): (status: IStatus) => void;
    protected isHandleResponseSystemStatus(resource: string, status: IStatus): boolean;
    sendAndReceive(resource: string, rqData: IData, success: (rsData: IData) => void, failure: (status: IStatus) => void, timeoutMills?: number): void;
    sendAndReceiveAsync(resource: string, rqData: IData, success: (rsData: IData) => void, failure: (status: IStatus) => void, timeoutMills?: number): void;
    pingpongBackendService(): void;
    getPDF(resource: string, success: (objectURL: string, fileName: string, dispose: () => void) => void, failure: (status: IStatus) => void, timeoutMills?: number, noCache?: boolean): void;
    postPDF(resource: string, rqData: IData, success: (objectURL: string, fileName: string, dispose: () => void) => void, failure: (status: IStatus) => void, timeoutMills?: number): void;
    protected prepareRq(rqData: IData, resource: string): IData;
    protected handleResponseSystemStatus(status: IStatus, failure: (status: IStatus) => void): void;
    protected checkClientDupRequest(rq: IData): boolean;
    getClientStartTime(): string;
}
