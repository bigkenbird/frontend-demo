import { IData, IHistoryItem } from '@twix/ix-lib-base';
import { IVueConfig } from '../vue-config';
import { IStatus } from '../vue-interface';
import { AuthService } from './auth.service';
import { EventBusService } from './event-bus.service';
import { EventService } from './event.service';
import { InvokeService } from './invoke.service';
import { NavigationService } from './navigation.service';
import { IRouteService } from './route.service';
import { SharedDataService } from './shared-data.service';
import { StatusService } from './status.service';
import { StorageService } from './storage.service';
import { ViewService } from './view.service';
import { BaseService } from './base-service';
export declare class AppBaseService extends BaseService {
    protected serviceName: string;
    protected get route(): IRouteService;
    protected get navigation(): NavigationService;
    get config(): IVueConfig;
    protected get invoke(): InvokeService;
    get view(): ViewService;
    get sharedData(): SharedDataService;
    get storage(): StorageService;
    get event(): EventService;
    get status(): StatusService;
    get eventBus(): EventBusService;
    get auth(): AuthService;
    changeTxn(taskNo: string, rqData?: IData): void;
    changeTxnAndNoTxnStack(taskNo: string, rqData?: IData): void;
    nextPage(routeUrl: string, data?: IData, ignorePageHistory?: boolean): void;
    nextErrorPage(status: IStatus, ignorePageHistory?: boolean): void;
    previousPage(previous?: number, data?: {}, reload?: boolean): void;
    previousFirstPage(data?: IData, reload?: boolean): void;
    hasBackHistory(): boolean;
    changeHomeTxn(pageData?: IData): void;
    previousHomeTxn(): void;
    sendAndReceive(resource: string, rqData: IData, success: (rsData: IData) => void, failure: (status: IStatus) => void, timeoutMills?: number): void;
    sendAndReceiveAsync(resource: string, rqData: IData, success: (rsData: IData) => void, failure: (status: IStatus) => void, timeoutMills?: number): void;
    sendAndReceivePromise(resource: string, rqData: IData, timeoutMills?: number): Promise<[IStatus, IData]>;
    sendAndReceivePromiseAsync(resource: string, rqData: IData, timeoutMills?: number): Promise<[IStatus, IData]>;
    doPostPDF(resource: string, rqData: IData, success: () => void, failure: (popupBloked: boolean, status?: IStatus) => void, timeoutMills?: number): void;
    doPostPDFAndName(resource: string): void;
    pingpongBackendService(): void;
    protected openExtUrlLog(url: string, title?: string): void;
    parseURLScheme(url: string): [string | null, Record<string, string>];
    parseTaskNoParams(url: string): [string | null, Record<string, string>];
    getRoutePath(): string;
    getPreviousPageRouteUrl(): string;
    getTaskNo(): string;
    getTaskName(taskNo?: string): string;
    getTxnPk(): string;
    isTxnHeadPage(): boolean;
    getCurrentHistoryTrack(): IHistoryItem;
    getPagePk(): string;
    reloadApp(): Promise<void>;
    scrollAnimate(to: number, animate?: boolean, duration?: number, scrollingElement?: HTMLElement): Promise<void>;
    getScrollTop(scrollingElement?: HTMLElement): number;
    registerEventBusEvents(): void;
    protected bindClickSendLog(e: MouseEvent): void;
    doLogout(warning?: boolean): void;
}
