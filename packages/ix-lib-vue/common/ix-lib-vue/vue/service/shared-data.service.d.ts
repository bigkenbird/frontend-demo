import { IData } from '@twix/ix-lib-base';
import { IPage } from '../use/use-page';
import { IModalComponent, ITxnTask } from '../vue-interface';
import { BaseService } from './base-service';
export declare class SharedDataService extends BaseService {
    protected serviceName: string;
    protected global: {
        getData: <V>(key: string) => V;
        hasData: (key: string) => boolean;
        setData: (key: string, val: unknown) => boolean;
        removeData: (key: string) => boolean;
        clearData: () => void;
    };
    protected session: {
        getData: <V>(key: string) => V;
        hasData: (key: string) => boolean;
        setData: (key: string, val: unknown) => boolean;
        removeData: (key: string) => boolean;
        clearData: () => void;
    };
    protected txn: {
        getData: <V>(key: string) => V;
        hasData: (key: string) => boolean;
        setData: (key: string, val: unknown) => boolean;
        removeData: (key: string) => boolean;
        clearData: () => void;
    };
    protected page: {
        getData: <V>(key: string) => V;
        hasData: (key: string) => boolean;
        setData: (key: string, val: unknown) => boolean;
        removeData: (key: string) => boolean;
        clearData: () => void;
    };
    clearGlobalData(): void;
    clearSessionData(): void;
    clearTxnData(): void;
    clearPageData(): void;
    clearAll(): void;
    protected startUrl: string;
    getStartUrl(): string;
    setStartUrl(url: string): void;
    protected urlRoot: string;
    getUrlRoot(): string;
    setUrlRoot(urlRoot: string): void;
    protected XAuthToken: string;
    protected XAuthTokenTime: string;
    getXAuthToken(): string;
    getXAuthTokenTime(): number | null;
    setXAuthToken(token: string): boolean;
    clearXAuthToken(): void;
    protected login: string;
    isLogin(): boolean;
    setLogin(login: boolean): void;
    protected checkDupTxnToken: string;
    getCheckDupTxnToken(): string;
    setCheckDupTxnToken(token: string): void;
    protected pageRootElement: string;
    getPageRootElement(): HTMLElement;
    setPageRootElement(element: HTMLElement): void;
    protected scrollingElement: string;
    getScrollingElement(): HTMLElement;
    setScrollingElement(element: Element | Window): void;
    protected pageComponent: string;
    getPageComponent(): IPage;
    setPageComponent(page: IPage): void;
    protected txnUUID: string;
    getTxnUUID(): string;
    setTxnUUID(val: string): void;
    protected rqDataForCheckList: string;
    getRqDataForCheckList(): string[];
    protected txnTaskList: string;
    getTxnTask(key: string): ITxnTask | null;
    setTxnTaskList(list: {
        [key: string]: ITxnTask;
    }): void;
    clearTxnTaskList(): void;
    protected WCMBaseUrl: string;
    getWCMBaseUrl(): string;
    setWCMBaseUrl(url: string): void;
    protected routeConfig: string;
    getRouteConfig(): IData;
    setRouteConfig(config: IData): void;
    getTxnData<V>(pk: string): V;
    setTxnData(pk: string, data: unknown): void;
    protected triggerLoginNavigateData: string;
    getTriggerLoginNavigateData(): any[];
    setTriggerLoginNavigateData(data: any[]): void;
    protected pageActivateDone: string;
    isPageActivateDone(): boolean;
    setPageActivateDone(done: boolean): void;
    protected pageActivatePromise: string;
    getPageActivatePromise(): (result: boolean) => void;
    setPageActivatePromise(promise: (result: boolean) => void): void;
    protected previousRouteUrl: string;
    getPreviousRouteUrl(): string;
    setPreviousRouteUrl(url: string | null): void;
    protected currentPagePK: string;
    getCurrentPagePK(): string;
    setCurrentPagePK(pk: string): void;
    protected previousReuseData: string;
    getPreviousReuseData(): IData;
    setPreviousReuseData(data: IData): void;
    protected windowFocusAction: string;
    getWindowFocusAction(): number;
    setWindowFocusAction(action: number): void;
    protected txnWidgetUrls: string;
    getTxnWidgetUrls(): string[];
    setTxnWidgetUrls(urls: string[]): void;
    protected modalShowing: string;
    getModalShowing(): IModalComponent[];
    hasModalShowing(): boolean;
    hasModalShowingWhenPageChanged(): boolean;
    protected appInBackground: string;
    isAppInBackground(): boolean;
    setAppInBackground(background: boolean): void;
}
